using System;
using System.Collections.Generic;
using System.Collections;
using System.IO;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Reflection;

using ACG.Common;

namespace ACG.Common.Data
{
  public class MaintenanceDataSource : DataAccessBase
  {
    #region private data
    private string _user { get { if (SecurityContext != null) return SecurityContext.User; else return null; } }
    private string[] _readOnlyFields = new string[] { "LastModifiedBy", "LastModifiedDateTime" };
    private string[] _keyNames = new string[0];
    private string[] _fieldNames = new string[0];

    #endregion

    #region public properties
    public string TableName { get; set; }
    public ISecurityContext SecurityContext { get; set; }
    public ISearchDataSource SearchDataSource { get; set; }
    public string DataSource { get; set; }
    public string GridDataSource { get; set; }
    public string AssemblyName { get; set; }
    public Dictionary<string, string> IndexFields = new Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase);
    public Dictionary<string, string> HiddenFields = new Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase);
    public Dictionary<string, string> ReadOnlyFields = new Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase);
    public Dictionary<string, Dictionary<string, string>> FieldList = new Dictionary<string, Dictionary<string, string>>(StringComparer.CurrentCultureIgnoreCase);
    public string[] FieldNames { get { return _fieldNames; } }
    public string[] KeyNames { get { return _keyNames; } }

    public bool CanAddRecord { get; set; }
    public bool CanDeleteRecord { get; set; }
    public bool CanUpdateRecord { get; set; }

    #endregion

    public MaintenanceDataSource() 
    {
      init();
    }
    public MaintenanceDataSource(string source, ISecurityContext securityContext)
    {
      if (!string.IsNullOrEmpty(source))
        DataSource = source;
      if (securityContext != null)
        SecurityContext = securityContext;
      init();
    }

    #region public methods
    public void Init()
    {
      if (!string.IsNullOrEmpty(DataSource))
        loadDataSource();
    }
    public void saveRecord(string[] values)
    {
      if (values == null || _fieldNames == null || values.GetLength(0) != _fieldNames.GetLength(0))
        throw new Exception("Maintenance save record values do not match fieldnames");
      ArrayList keyValues = new ArrayList();
      foreach (string keyname in _keyNames)
        for (int i = 0; i < _fieldNames.GetLength(0); i++)
          if (_fieldNames[i].Equals(keyname, StringComparison.CurrentCultureIgnoreCase))
            keyValues.Add(values[i]);
      if (existsRecord(TableName, _keyNames, (string[])keyValues.ToArray(typeof(string))))
        updateRecord(_fieldNames, values, _keyNames, TableName);
      else
        insertRecord(TableName, _fieldNames, values);
    }
    public void deleteRecord(string[] keyValues)
    {
      deleteRecords(_keyNames, keyValues, TableName);
    }
    public Dictionary<string, object> getRecord(string[] keyValues)
    {
      Dictionary<string, object> record = new Dictionary<string, object>(StringComparer.CurrentCultureIgnoreCase);
      string sql = makeSelectSQL(_keyNames, keyValues, TableName);
      using (DataSet ds = getDataFromSQL(sql))
      {
        if (ds == null || ds.Tables.Count == 0 || ds.Tables[0].Rows.Count == 0)
          return record;
        DataRow row = ds.Tables[0].Rows[0];
        foreach (DataColumn col in ds.Tables[0].Columns)
          record.Add(col.ColumnName, row[col.ColumnName]);
      }
      return record;
    }
    public string getDataType(string fieldname)
    {
      if (string.IsNullOrEmpty(fieldname) || !FieldList.ContainsKey(fieldname))
        return null;
      Dictionary<string, string> field = FieldList[fieldname];
      string dbtype = field["system_data_type"];
      return CommonFunctions.MapSQLToVar(dbtype);
    }
    #endregion

    #region private methods
    private void loadDataSource()
    {
      string sql = string.Format("Select * from MaintenanceDataSources where DataSource = '{0}'", DataSource);
      using (DataSet ds = getDataFromSQL(sql))
      {
        if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
          DataRow row = ds.Tables[0].Rows[0];
          GridDataSource = CommonFunctions.CString(row["GridSource"]);
          SearchDataSource = getSearchDataSource(CommonFunctions.CString(row["SearchDataSource"]));
          CanAddRecord = CommonFunctions.CBoolean(row["CanAddNew"], true);
          CanUpdateRecord = CommonFunctions.CBoolean(row["CanEdit"], true);
          CanDeleteRecord = CommonFunctions.CBoolean(row["CanDelete"], true);
          IndexFields = loadList(CommonFunctions.CString(row["IndexFields"]), null);
          HiddenFields = loadList(CommonFunctions.CString(row["HiddenFields"]), null);
          ReadOnlyFields = loadList(CommonFunctions.CString(row["ReadOnlyFields"]), _readOnlyFields);
          TableName = CommonFunctions.CString(row["TableName"]);
          loadFields();
        }
      }
    }
    private void loadFields()
    {
      if (string.IsNullOrEmpty(TableName))
        return;
      FieldList.Clear();
      ArrayList fieldNames = new ArrayList();
      using (DataSet ds = getDataFromSQL(string.Format("Select * from vw_DBColumnDetail where table_name = '{0}' order by Column_Order",TableName)))
      {
        if (ds != null && ds.Tables.Count > 0)
        {
          DataTable dt = ds.Tables[0];
          foreach (DataRow row in dt.Rows)
          {
            Dictionary<string, string> fields = new Dictionary<string,string>(StringComparer.CurrentCultureIgnoreCase);
            foreach (DataColumn col in dt.Columns)
              fields.Add(col.ColumnName, CommonFunctions.CString(row[col.ColumnName]));
            string fld = CommonFunctions.CString(row["column_name"]);
            FieldList.Add(fld, fields);
            fieldNames.Add(fld);
          }           
        }
      }
      ArrayList keyNames = new ArrayList();
      foreach (KeyValuePair<string, string> index in IndexFields)
      {
        if (FieldList.ContainsKey(index.Key))
          keyNames.Add(index.Key);
      }
      _fieldNames = (string[])fieldNames.ToArray(typeof(string));
      _keyNames = (string[])keyNames.ToArray(typeof(string));
    }
    private Dictionary<string, string> loadList(string strlist, string[] defaultEntries)
    {
      Dictionary<string, string> list = new Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase);
      if (!string.IsNullOrEmpty(strlist))
      {
        if (strlist.Contains(","))
        {
          string[] parts = strlist.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
          foreach (string part in parts)
            list.Add(part, null);
        }
        else
          list.Add(strlist, null);
      }
      if (defaultEntries != null)
        foreach (string entry in defaultEntries)
          if (!list.ContainsKey(entry))
            list.Add(entry, null);
      return list;
    }
    private ISearchDataSource getSearchDataSource(string dataSource)
    {
      if (string.IsNullOrEmpty(dataSource))
        return null;
      Dictionary<string, string> parmlist = new Dictionary<string,string>(StringComparer.CurrentCultureIgnoreCase);
      string dataSourceName = dataSource;
      if (dataSource.Contains("("))// has parameters
      {
        string paramstring;
        dataSourceName = CommonFunctions.getFunctionName(dataSource, out paramstring);
        string[] paramlist = paramstring.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (string parm in paramlist)
        {
          if (parm.Contains(":"))
          {
            string[] parts = parm.Split(new char[] { ':' });
            if (parts != null && parts.GetLength(0) == 2)
            {
              parmlist.Add(parts[0], parts[1]);
            }
          }
        }
      }
      try
      {
        Assembly asm = Assembly.LoadFrom(AssemblyName + ".dll");
        Type t = asm.GetType(dataSourceName);
        ISearchDataSource searchSource = (ISearchDataSource)Activator.CreateInstance(t);
        if (parmlist.Count > 0)
        {
          foreach (KeyValuePair<string, string> p in parmlist)
          {
            searchSource.GetType().GetProperty(p.Key).SetValue(searchSource, p.Value, null);
          }
        } 
        return searchSource;
      }
      catch (Exception e)
      {
        return null;
      }
     
    }
    private void init()
    {
      AssemblyName = "ACG";
      CanAddRecord = true;
      CanDeleteRecord = true;
      CanUpdateRecord = true;
    }
    #endregion
  }
}
