using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using ACG.Common;
using ACG.Common.Data;

namespace ACG.CommonForms
{
  public partial class frmMaintenanceBase : Form, IScreenBase
  {
    #region private data
    private bool _dirty = false;
    private bool _fieldsLoaded = false;
    private int _labelWidth = 100;
    private int _horizontalMargin = 10;
    private int _verticalMargin = 1;
    private int _height = 25;
    private int _controlWidth = 300;

    private MaintenanceDataSource _dataSource = null;
    private DataGridViewRow _selectedRow = null;
    private Dictionary<string, string> _fieldSearchDataSources = new Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase);
    #endregion

    #region public properties
    public ISecurityContext SecurityContext { get; set; }
    public string DataSource { get; set; }
    public int LabelWidth
    {
      get { return _labelWidth; }
      set { _labelWidth = value; }
    }
    public int ControlWidth
    {
      get { return _controlWidth; }
      set { _controlWidth = value; }
    }
    public int RowHeight
    {
      get { return _height; }
      set { _height = value; }
    }
    public int VerticalMargin
    {
      get { return _verticalMargin; }
      set { _verticalMargin = value; }
    }
    public int HorizontalMargin
    {
      get { return _horizontalMargin; }
      set { _horizontalMargin = value; }
    }
    #endregion

    public frmMaintenanceBase()
    {
      InitializeComponent();
    }

    #region public methods
    public void Init(string dataSource)
    {
      _dataSource = new MaintenanceDataSource(dataSource, SecurityContext);
      _dataSource.AssemblyName = "CCI.Sys";
      _dataSource.Init();
      ctlSearchMain.SearchExec = _dataSource.SearchDataSource;
      ctlSearchList.Init(_dataSource.GridDataSource, ctlSearchList.Name);
      ctlSearchList.HiddenColumns = _dataSource.HiddenFields;
      ctlSearchList.ReLoad();
      initEditForm();
      ctlSearchList.SelectFirst();
    }
    public void Save()
    {
      _dataSource.saveRecord(getValues());
      ctlSearchList.ReLoad();
    }
    public void Clear()
    {
      foreach (Control c in panelReadOnly.Controls)
        if (c.Name.StartsWith("txt"))
          c.Text = null;
      foreach (Control c in panelEdit.Controls)
        if (c.Name.StartsWith("txt"))
          c.Text = null;
    }
    #endregion

    #region private methods
    private string[] getValues()
    {
      List<string> values = new List<string>();
      foreach (DataGridViewColumn col in ctlSearchList.Columns)
      {
        string fld = col.Name;
        if (_dataSource.FieldList.ContainsKey(fld))
        {
          Control c;
          if (_dataSource.HiddenFields.ContainsKey(fld) || _dataSource.ReadOnlyFields.ContainsKey(fld))
            c = panelReadOnly.Controls["txt" + fld];
          else
            c = panelEdit.Controls["txt" + fld];
          values.Add(CommonFunctions.CString(getValue(c)));
        }
      }
      return (string[])values.ToArray();
    }
    private void initEditForm()
    {
      if (_fieldsLoaded)
        return;
      panelEdit.Controls.Clear();
      panelReadOnly.Controls.Clear();
      int paneheight = panelEdit.Height;
      int nbrrows = paneheight / (_height + _verticalMargin);
      int editrow = 0;
      int editcol = 0;
      int readonlyrow = 0;
      int readonlycol = 0;
      int row = 0;
      int col = 0;
      for (int i = 0; i < _dataSource.FieldNames.GetLength(0); i++) // for each field
      {
        string fld = _dataSource.FieldNames[i];
        //calculate screen position
        if (_dataSource.ReadOnlyFields.ContainsKey(fld) || _dataSource.HiddenFields.ContainsKey(fld))
        {
          if (readonlyrow >= nbrrows)
          {
            readonlyrow = 0;
            readonlycol++;
          }
          row = readonlyrow;
          col = readonlycol;
          readonlyrow++;
        }
        else
        {
          if (editrow >= nbrrows)
          {
            editrow = 0;
            editcol++;
          }
          row = editrow;
          col = editcol;
          editrow++;
        }

        int top = row * (_height + _verticalMargin);
        int left = col * (_labelWidth + _controlWidth + _horizontalMargin * 2);
        // make label
        Label lbl = new Label();
        lbl.Name = "lbl" + fld;
        lbl.Text = fld;
        lbl.Width = _labelWidth;
        lbl.Height = _height;
        lbl.Top = top;
        lbl.Left = left;
        // make control
        // check datatype and picklist fields to decide what kind of control to put here
        Control txt;
        if (_dataSource.SearchFields.ContainsKey(fld) && !_dataSource.HiddenFields.ContainsKey(fld))
        {
          // control is a search control
          ISearchDataSource source = _dataSource.getSearchDataSource(_dataSource.SearchFields[fld]); // try to get a valid search data source
          if (source == null) // if there isn't one, then just use  text box
            txt = new TextBox();
          else
          {
            txt = new ctlSearch();
            ((ctlSearch)txt).SearchExec = source;
            ((ctlSearch)txt).ShowTermedCheckBox = false;
            ((ctlSearch)txt).ShowCustomerNameWhenSet = true;
            ((ctlSearch)txt).AutoAddNewMode = true;
            ((ctlSearch)txt).AutoSelectWhenMatch = false;
            ((ctlSearch)txt).AutoTabToNextControlOnSelect = true;
            ((ctlSearch)txt).ClearSearchWhenComplete = false;
            ((ctlSearch)txt).DisplayOnlyDescription = false;
            ((ctlSearch)txt).DisplayOnlyID = false;
            ((ctlSearch)txt).MustExistInList = false;
          }
        }
        else
        {
          string datatype = _dataSource.getDataType(fld).ToLower();
          switch (datatype)
          {
            case "datetime":
              txt = new DateTimePicker();
              break;
            case "bool":
              txt = new CheckBox();
              break;
            default:
              txt = new TextBox();
              if (_dataSource.HiddenFields.ContainsKey(fld) && !string.IsNullOrEmpty(_dataSource.HiddenFields[fld]))
                txt.Text = _dataSource.HiddenFields[fld]; // set the default value
              break;
          }
        }
        txt.Name = "txt" + fld;
        txt.Width = _controlWidth;
        txt.Height = _height;
        txt.Top = top;
        txt.Left = left + _labelWidth + _horizontalMargin;
        if (_dataSource.HiddenFields.ContainsKey(fld))
        {
          lbl.Visible = false;
          txt.Visible = false;
        }
        if (_dataSource.ReadOnlyFields.ContainsKey(fld) || _dataSource.HiddenFields.ContainsKey(fld))
        {
          txt.Enabled = false;
          panelReadOnly.Controls.Add(lbl);
          panelReadOnly.Controls.Add(txt);
        }
        else
        {
          panelEdit.Controls.Add(lbl);
          panelEdit.Controls.Add(txt);
        }
      }
      _fieldsLoaded = true;
    }
    private void loadFieldsFromGrid()
    {
      foreach (DataGridViewColumn col in ctlSearchList.Columns)
      {
        string fld = col.Name;
        if (_dataSource.FieldList.ContainsKey(fld))
        {
          Control c;
          if (_dataSource.HiddenFields.ContainsKey(fld) || _dataSource.ReadOnlyFields.ContainsKey(fld))
            c = panelReadOnly.Controls["txt" + fld];
          else
            c = panelEdit.Controls["txt" + fld];
          setValue(c, _selectedRow.Cells[fld].Value);
        }
      }
    }
    private void setValue(Control c, object o)
    {
      switch (c.GetType().Name.ToLower())
      {
        case "datetimepicker":
          ((DateTimePicker)c).Value = CommonFunctions.CDateTime(o);
          break;
        case "checkbox":
          ((CheckBox)c).Checked = CommonFunctions.CBoolean(o);
          break;
        case "ctlsearch":
          ((ctlSearch)c).Text = CommonFunctions.CString(o);
          break;
        default:
          c.Text = CommonFunctions.CString(o);
          break;
      }
    }
    private object getValue(Control c)
    {
      switch (c.GetType().Name.ToLower())
      {
        case "datetimepicker":
          return ((DateTimePicker)c).Value;
        case "checkbox":
          return ((CheckBox)c).Checked;
        default:
          return c.Text;
      }
    }
    private void clearFields()
    {
      foreach (DataGridViewColumn col in ctlSearchList.Columns)
      {
        string fld = col.Name;
        if (_dataSource.FieldList.ContainsKey(fld))
        {
          Control c;
          if (_dataSource.HiddenFields.ContainsKey(fld) || _dataSource.ReadOnlyFields.ContainsKey(fld))
            c = panelReadOnly.Controls["txt" + fld];
          else
            c = panelEdit.Controls["txt" + fld];
          setValue(c, null);
        }
      }
    }
    private void refreshFieldPositions()
    {      
      int paneheight = panelEdit.Height;
      int nbrrows = paneheight / (_height + _verticalMargin);
      int editrow = 0;
      int editcol = 0;
      int readonlyrow = 0;
      int readonlycol = 0;
      int row = 0;
      int col = 0;
      Panel p;
      for (int i = 0; i < _dataSource.FieldNames.GetLength(0); i++) // for each field
      {
        string fld = _dataSource.FieldNames[i];
        //calculate screen position
        if (_dataSource.ReadOnlyFields.ContainsKey(fld) || _dataSource.HiddenFields.ContainsKey(fld))
        {
          p = panelReadOnly;
          if (readonlyrow >= nbrrows)
          {
            readonlyrow = 0;
            readonlycol++;
          }
          row = readonlyrow;
          col = readonlycol;
          readonlyrow++;
        }
        else
        {
          p = panelEdit;
          if (editrow >= nbrrows)
          {
            editrow = 0;
            editcol++;
          }
          row = editrow;
          col = editcol;
          editrow++;
        }

        int top = row * (_height + _verticalMargin);
        int left = col * (_labelWidth + _controlWidth + _horizontalMargin * 2);
        Label lbl = (Label)p.Controls["lbl" + fld];
        Control txt = p.Controls["txt" + fld];
        lbl.Left = left;
        lbl.Top = top;
        txt.Left = left + _labelWidth + _horizontalMargin;
        txt.Top = top;
      }
    }
    #endregion

    #region form events
    private void frmMaintenanceBase_Load(object sender, EventArgs e)
    {

    }
    private void btnSave_Click(object sender, EventArgs e)
    {
      Save();
    }
    private void btnNew_Click(object sender, EventArgs e)
    {
      clearFields();
    }
    private void btnCancel_Click(object sender, EventArgs e)
    {

    }
    private void ctlSearchList_RowSelected(object sender, MaintenanceGridRowSelectedArgs e)
    {
      Clear();
      _selectedRow = e.SelectedRow;
      loadFieldsFromGrid();
    }
    private void frmMaintenanceBase_Resize(object sender, EventArgs e)
    {
      refreshFieldPositions();
    }
    private void ctlSearchMain_OnSelected(object sender, EventArgs e)
    {
      string idName = ctlSearchMain.SearchExec.IDName;
      ctlSearchList.SearchCriteria = new Dictionary<string, string[]>(StringComparer.CurrentCultureIgnoreCase) { { idName, new string[] { ctlSearchGrid.opEQUALS, ctlSearchMain.Text } } };
      ctlSearchList.ReLoad();
      ctlSearchList.SelectFirst();
    }

    #endregion

  }
}
