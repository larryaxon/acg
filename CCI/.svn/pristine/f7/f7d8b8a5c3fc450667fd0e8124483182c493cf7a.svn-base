using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;

using CCI.Common;
using CCI.Sys.Data;

using TAGBOSS.Common;
using TAGBOSS.Common.Model;

namespace CCI.DesktopClient.Common
{
  public partial class ctlEntityGridBase : UserControl
  {
    #region private method data
    private const string colCONTACTTYPE = "ContactType";
    private const string colISPRIMARY = "IsPrimary";
    private const string colSTATE = "State";
    private const string colEntityOwner = "EntityOwner";
    private bool _dirty = false;
    private DataSource _dSource = null;
    private string _entityType = "Contact";
    private int _selectedRowIndex = -1;
    private string _selectedID = string.Empty;
    private bool _searching = false;
    private string _uniqueIdentifer = "Entity";
    private const string textPrefix = "txt";
    private const string labelPrefix = "lbl";
    private const string buttonPrefix = "btn";
    private string[] _buttons = new string[] { "Save", "Cancel", "New", "Delete" };
    private int _labelWidth = 75;
    private int _textWidth = 200;
    private int _buttonWidth = 50;
    #endregion

    #region protected method data

    protected DataSource _dataSource { get { if (_dSource == null) _dSource = new DataSource(); return _dSource; } }
    protected DateTime _effectiveDate = DateTime.Today;
    protected SearchResultCollection _entityList = null;
    protected ArrayList _groupList = new ArrayList();
    protected string[] _contactTypes = null;
    protected DataGridViewComboBoxCell _contactTypeCol = new DataGridViewComboBoxCell();
    protected string[] _states = null;
    protected DataGridViewComboBoxCell _stateCol = new DataGridViewComboBoxCell();
    protected string[] _columnNames = new string[] { "LegalName","Phone","Address1","Address2","City","State","Zip","Entity","EntityOwner","EntityType", "IsPrimary"};
    protected EntityAttributesCollection _eac = null;
    protected DataSet _ds = null;

    #endregion
    #region public properties and data

    public string[] ColumnNames { get { return _columnNames; } set { _columnNames = value; } }
    public string[] StateList { get { return _states; } set { _states = value; } }
    public string EntityOwnerType { get; set; }
    public string EntityOwner { get; set; }
    public ACG.Common.ISecurityContext SecurityContext { get; set; }
    public string EntityType { get { return _entityType; } set { _entityType = value; } }
    public Dictionary<string, object> DefaultValues = new Dictionary<string, object>(StringComparer.CurrentCultureIgnoreCase);
    public bool Dirty { get { return _dirty; } }

    #endregion

    public ctlEntityGridBase()
    {
      InitializeComponent();
    }

    public void Init(string entityOwner, string entityOwnerType)
    {
      if (!CommonFunctions.inList(_columnNames, colISPRIMARY))
      {
        int nbrNames = _columnNames.GetLength(0) + 1;
        string[] newCols = new string[nbrNames];
        for (int i = 0; i < nbrNames - 1; i++)
          newCols[i] = _columnNames[i];
        newCols[nbrNames - 1] = colISPRIMARY;
        _columnNames = newCols;
      }
      if (_contactTypes == null && CommonFunctions.inList(_columnNames, colCONTACTTYPE))
        _contactTypes = _dataSource.getCodeList("ContactTypes");
      EntityOwner = entityOwner;
      EntityOwnerType = entityOwnerType;
      if (string.IsNullOrEmpty(entityOwner))
      {
        grdEntities.DataSource = null;
        ctlGroupView.Clear();
      }
      else
        reload();

    }
    public void Save()
    {
      savePane();
    }
    public void Clear()
    {
      //try { grdEntities.Rows.Clear(); }
      //catch { }
      if (grdEntities.DataSource != null)
        ((DataView)grdEntities.DataSource).Table.Rows.Clear();
      DefaultValues.Clear();
    }

    #region private methods
    private void reload()
    {
      loadGroupView(EntityOwner, EntityType, EntityOwnerType);
      StringBuilder sbEntityList = new StringBuilder();
      bool firstTime = true;
      foreach (string s in ctlGroupView.Members)
      {
        if (firstTime)
          firstTime = false;
        else
          sbEntityList.Append(",");
        sbEntityList.Append(ctlGroupMembers.getID(s));
      }
      _eac = _dataSource.getAttributes(sbEntityList.ToString(), "Entity", _entityType, null, _effectiveDate);
      loadGrid();
    }
    private void loadPrimaryInfo(EntityAttributesCollection eac, string entityOwner, ArrayList members)
    {
      // Load an extra "virtual" field that contains the isPrimary data from GroupMembers
      Dictionary<string, bool> memberPrimaryList = new Dictionary<string, bool>(StringComparer.CurrentCultureIgnoreCase);
      foreach (string member in members)
      {
        string id = getID(member);
        bool isPrimary = false;
        if (member.EndsWith("(Primary)"))
          isPrimary = true;
        if (memberPrimaryList.ContainsKey(id))
          memberPrimaryList[id] = isPrimary;
        else
          memberPrimaryList.Add(id, isPrimary);
      }
      foreach (Entity e in eac.Entities)
      {
        if (e.ItemTypes.Contains("Entity"))
        {
          foreach (Item i in e.ItemTypes["Entity"].Items)
            i.AddAttribute("IsPrimary", memberPrimaryList[e.ID]);
        }
      }
    }
    private void loadGrid()
    {     
      _ds = new DataSet(EntityType);
      DataTable dt = new DataTable(EntityType);
      bool firstOne = true;
      if (_eac == null || _eac.Entities.Count == 0)
      {
        // there were no contacts for the Entity Owner, but we still want to present an empty grid with the correct columns,
        // so we get a virtual item. It will not contain any usefull values but it will have the right columns
        EntityAttributesCollection eac = _dataSource.getDummyEntityRecord(EntityOwner, _entityType);
        Item iDummy = (Item)eac.getValue(string.Format("{0}.Entity.{1}", EntityOwner, _entityType));
        if (iDummy != null)
          loadColumns(dt, iDummy);
      }
      else
      {
        foreach (Entity e in _eac.Entities)
        {
          if (e.ItemTypes.Contains("Entity") && e.ItemTypes["Entity"].Items.Contains(EntityType))
          {
            Item item = e.ItemTypes["Entity"].Items[EntityType];
            string entity = e.OriginalID;
            if (firstOne)
            {
              firstOne = false;
              loadColumns(dt, item);
            }
            DataRow row = dt.NewRow();
            for (int i = 0; i < _columnNames.GetLength(0); i++)
            {
              string aID = _columnNames[i];
              if (item.Attributes.Contains(aID))
                row[aID] = CommonFunctions.CString(item.Attributes[aID].Value);
              else
                if (aID.Equals("Entity", StringComparison.CurrentCultureIgnoreCase))
                  row[aID] = e.OriginalID;
                else
                  row[aID] = null;
            }
            dt.Rows.Add(row);
          }
        }
      }
      _ds.Tables.Add(dt);
      CommonFormFunctions.displayDataSetGrid(grdEntities, _ds);
      if (grdEntities.Columns.Count > 0)
      {
        grdEntities.Columns["Entity"].Visible = false;
        grdEntities.Columns["EntityOwner"].Visible = false;
        grdEntities.Columns["EntityType"].Visible = false;
        if (grdEntities.Columns.Contains("LegalName"))
          if (_entityType.Equals("Contact", StringComparison.CurrentCultureIgnoreCase))
            grdEntities.Columns["LegalName"].HeaderText = "LastName";
          else
            if (_entityType.Equals("Location", StringComparison.CurrentCultureIgnoreCase))
              grdEntities.Columns["LegalName"].HeaderText = "Location";

      }
      else
      {
        // we have no data, so we add the columns by themselves.
        foreach (string name in _columnNames)
        {
          DataGridViewColumn col = new DataGridViewColumn(new DataGridViewTextBoxCell());
          col.Name = name;
          grdEntities.Columns.Add(col);
        }
      }
      
    }
    private void loadGroupView(string entityOwner, string entityType, string entityOwnerType)
    {
      ctlGroupView.Entity = entityOwner;
      ctlGroupView.EntityType = entityType;
      ctlGroupView.GroupEntityType = entityOwnerType;
      ctlGroupView.IsGroup = true;
      ctlGroupView.Init();
    }
    //private void saveFromGrid()
    //{
    //  if (_eac == null)
    //  {
    //    _eac = new EntityAttributesCollection();
    //  }
    //  if (_ds != null && _ds.Tables.Count > 0)
    //  {
    //    foreach (DataRow row in _ds.Tables[0].Rows)
    //    {
    //      string entity  = CommonFunctions.CString(row["Entity"]);
    //      if (row.RowState == DataRowState.Deleted && !string.IsNullOrEmpty(entity))
    //      {
    //        _dataSource.terminateEntity(entity);
    //      }
    //      else
    //      {
    //        if (row.RowState == DataRowState.Modified || row.RowState == DataRowState.Added)
    //        {
    //          if (row.RowState == DataRowState.Added)
    //          {
    //            if (string.IsNullOrEmpty(entity)) // this is a new row, so we autogenerate an entity id as EntityOwner-LastName, with an index suffix if it is not unique
    //            {
    //              int cnt = 0;
    //              bool existsEntity = false;
    //              do
    //              {
    //                string strCount = string.Empty;
    //                if (cnt > 0)
    //                  strCount = cnt.ToString();
    //                entity = string.Format("{0}-{1}{2}", EntityOwner, CommonFunctions.CString(row["LegalName"]).Replace(" ","").Replace('/','-'), strCount);
    //                existsEntity = _dataSource.ExistsEntity(entity);
    //                cnt++;
    //              } while (existsEntity);
    //              row["Entity"] = entity; // now update the entity column to match
    //            }
    //          }
    //          foreach (DataColumn col in _ds.Tables[0].Columns)
    //          {
    //            // set default values:
    //            object val = row[col.ColumnName];
    //            if (col.ColumnName.Equals("EntityType", StringComparison.CurrentCultureIgnoreCase))
    //              val = EntityType;
    //            else
    //              if (col.ColumnName.Equals("EntityOwner", StringComparison.CurrentCultureIgnoreCase))
    //                val = EntityOwner;
    //              else
    //                if (col.ColumnName.Equals("Entity", StringComparison.CurrentCultureIgnoreCase))
    //                  val = entity;
    //            if (col.ColumnName.Equals(colISPRIMARY))
    //            {
    //              // IsPrimary is a virtual column that maps to the GroupMembers table, not attribute table
    //              _dataSource.memberSetPrimary(EntityOwner, entity, CommonFunctions.CBoolean(val), SecurityContext.User);
    //              _eac.Entities[entity].ItemTypes["Entity"].Items[_eac.Entities[entity].EntityType].Attributes.Remove(colISPRIMARY);
    //            }
    //            if (_dataSource.IsEntityField(col.ColumnName))
    //              _eac.setValue(string.Format("{0}.{1}", entity, col.ColumnName), val);
    //            else
    //              _eac.setValue(string.Format("{0}.Entity.{1}.{2}", entity, EntityType, col.ColumnName), val);
    //          }
    //          if (_eac.Entities.Dirty)
    //            _dataSource.saveEntity(_eac);            
    //        }
    //      }
    //    }
    //  }
    //  _dirty = false;

    //}

    private void loadColumns(DataTable dt, Item item)
    {
      for (int i = 0; i < _columnNames.GetLength(0); i++)
      {
        string aID = _columnNames[i];
        DataColumn col = new DataColumn(aID, typeof(string));
        if (aID.Equals("LegalName", StringComparison.CurrentCultureIgnoreCase))
        {
          if (_entityType.Equals("Contact", StringComparison.CurrentCultureIgnoreCase))
            col.Caption = "Last Name";
          else
            if (_entityType.Equals("Location", StringComparison.CurrentCultureIgnoreCase))
              col.Caption = "Location Name";
        }
        col.ReadOnly = true; // grid is read only
        dt.Columns.Add(col);
      }
      initEditPane();
    }
    private void loadEditPane(DataGridViewRow row)
    {
      ControlCollection pnl = flowEntityMaintenance.Controls;
      foreach (string col in _columnNames)
      {
        Control txt = pnl[textPrefix + col];
        if (txt.GetType() == typeof(CheckBox))
          ((CheckBox)txt).Checked = CommonFunctions.CBoolean(row.Cells[col].Value);
        else
          txt.Text = CommonFunctions.CString(row.Cells[col].Value);
        // sopmetimes the entityowner column may not be populated, in which case we put the valid value in
        if (txt.Name.Equals(textPrefix + colEntityOwner, StringComparison.CurrentCultureIgnoreCase) && string.IsNullOrEmpty(txt.Text))
          txt.Text = EntityOwner;
      }
    }
    private void clearEditPane()
    {
      ControlCollection pnl = flowEntityMaintenance.Controls;
      if (_columnNames != null && _columnNames.GetLength(0) > 0)
      {
        foreach (string col in _columnNames)
        {
          Control txt = pnl[textPrefix + col];
          txt.Text = string.Empty;
        }
      }
    }
    private void initEditPane()
    {
      ControlCollection pnl = flowEntityMaintenance.Controls;
      if (pnl.Count != _columnNames.GetLength(0))
      {
        pnl.Clear();
        _textWidth = getTextWidth();
        foreach (string col in _columnNames)
        {
          Label lbl = new Label();
          lbl.Name = labelPrefix + col;
          lbl.Text = col;
          lbl.Width = _labelWidth;
          pnl.Add(lbl);
          Control txt;
          switch (col) // populate combos
          {
            case colCONTACTTYPE:
              txt = new ComboBox();
              ((ComboBox)txt).Items.AddRange(_contactTypes);
              break;
            case colSTATE:
              txt = new ComboBox();
              if (_states != null)
                ((ComboBox)txt).Items.AddRange(_states);
              break;
            case colISPRIMARY:
              txt = new CheckBox();
              break;
            default:
              txt = new TextBox();
              break;
          }
          txt.Name = textPrefix + col;
          txt.Width = _textWidth;
          pnl.Add(txt);
        }
        foreach (string b in _buttons)
        {
          Button btn = new Button();
          btn.Name = buttonPrefix + b;
          btn.Text = b;
          btn.Click += new EventHandler(btn_Click);
          pnl.Add(btn);
        }
      }
      else
        resizeFlowPanel();
    }
    private void resizeFlowPanel()
    {
      int width = flowEntityMaintenance.Width;
      _textWidth = getTextWidth();
      if (flowEntityMaintenance.Controls.Count > 0)
        foreach (Control c in flowEntityMaintenance.Controls)
          if (c.Name.StartsWith(textPrefix))
            c.Width = _textWidth;
    }
    private int getTextWidth()
    {
      return flowEntityMaintenance.Width - _labelWidth - flowEntityMaintenance.Margin.Left * 3 - 5;
    }
    private void swap()
    {      
      ctlGroupView.Visible = grdEntities.Visible;
      grdEntities.Visible = !grdEntities.Visible;
      if (ctlGroupView.Visible)
        btnSwap.Text = ">";
      else
        btnSwap.Text = "<";
    }
    private string getID(string member)
    {
      if (string.IsNullOrEmpty(member))
        return string.Empty;
      int pos = member.IndexOf(":");
      if (pos < 0)
        return member;
      return member.Substring(0, pos).Trim();
    }
    private void savePane()
    {
      string entityColumnName = textPrefix + "Entity";
      // only save if there is an entity id and if it is not blank or null
      if (flowEntityMaintenance.Controls.ContainsKey(entityColumnName) && !string.IsNullOrEmpty(flowEntityMaintenance.Controls[entityColumnName].Text))
      {
        EntityAttributesCollection eac = new EntityAttributesCollection();
        eac.EffectiveDate = DateTime.Today;
        Entity e = new Entity();
        e.Fields.AddField("LastModifiedBy", SecurityContext.User);
        ItemType it = new ItemType();
        it.ID = "Entity";
        Item i = new Item();
        i.ID = _entityType;
        i.LastModifiedBy = SecurityContext.User;
        bool isPrimary = false;
        foreach (Control c in flowEntityMaintenance.Controls)
        {
          if (c.Name.StartsWith(textPrefix)) // only txt fields have data
          {
            object val;
            string name = c.Name.Substring(textPrefix.Length); // get column name by stripping off prefix
            if (c.GetType() == typeof(CheckBox))
              val = ((CheckBox)c).Checked;
            else
              val = CommonFunctions.CString(c.Text);
            if (name.Equals(colISPRIMARY))
              isPrimary = CommonFunctions.CBoolean(val); // just set this value, don't create a field or attribute cause this field is virtual
            else if (_dataSource.IsEntityField(name))
            {
              e.Fields.AddField(name, val);
              if (name.Equals("Entity"))
                e.ID = CommonFunctions.CString(val);
            }
            else
            {
              i.Attributes.AddAttribute(name, val);
              i.Attributes[name].LastModifiedBy = SecurityContext.User;
            }
          }
        }
        it.Items.Add(i);
        e.ItemTypes.Add(it);
        eac.Entities.Add(e);
        _dataSource.saveEntity(eac);
        _dataSource.memberSetPrimary(EntityOwner, e.ID, isPrimary, SecurityContext.User);
      }
      reload();
    }
    private void selectPane()
    {
      string memberSelected = ctlGroupView.SelectedMember;
      string memberID = getID(memberSelected);
      if (string.IsNullOrEmpty(memberID))
        clearEditPane();
      else
      {
        foreach (DataGridViewRow row in grdEntities.Rows)
          if (CommonFunctions.CString(row.Cells["Entity"].Value).Equals(memberID, StringComparison.CurrentCultureIgnoreCase))
          {
            loadEditPane(row);
            return;
          }
      }
      //clearEditPane();
    }
    private void deleteFromPane()
    {
      string entityColumnName = textPrefix + "Entity";
      // only delete if there is an entity id and if it is not blank or null
      if (flowEntityMaintenance.Controls.ContainsKey(entityColumnName))
      {
        Control c = flowEntityMaintenance.Controls[entityColumnName];
        if (!string.IsNullOrEmpty(c.Text))
        {
          string entity = c.Text;
          _dataSource.terminateEntity(entity);
          int? id = _dataSource.getMember(EntityOwner, entity);
          if (id != null && id > 0)
            _dataSource.updateGroupMember(id.ToString(), EntityOwner, entity, null, DateTime.Today.AddDays(-1), SecurityContext.User);
        }
      }
      reload();
    }
    #endregion

    #region form events

    private void flowEntityMaintenance_Resize(object sender, EventArgs e)
    {
      //resizeFlowPanel();
    }

    private void btn_Click(object sender, EventArgs e)
    {
      string name = ((Button)sender).Name.Substring(3);
      switch (name)
      {
        case "Save":
          savePane();
          break;
        case "Cancel":
          selectPane();
          break;
        case "New":
          clearEditPane();
          break;
        case "Delete":
          break;
      }
    }
    private void grdEntities_CellValueChanged(object sender, DataGridViewCellEventArgs e)
    {
      _dirty = true;
    }
    private void grdEntities_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
    {
    }
    private void grdEntities_DataError(object sender, DataGridViewDataErrorEventArgs e)
    {
      ;
    }
    private void grdEntities_UserAddedRow(object sender, DataGridViewRowEventArgs e)
    {
      _dirty = true;
      int index = e.Row.Index - 1;
      DataGridViewRow row = grdEntities.Rows[index];
      DataGridViewRow newRow = e.Row;      
      foreach (KeyValuePair<string, object> defaultValue in DefaultValues)
      {
        if (grdEntities.Columns.Contains(defaultValue.Key)
          && !string.IsNullOrEmpty(CommonFunctions.CString(defaultValue.Value)))
        {
          index = grdEntities.Columns[defaultValue.Key].Index;
          if (row.Cells[index] != null)
          {
            DataGridViewCell c = row.Cells[index];
            if (string.IsNullOrEmpty(CommonFunctions.CString(c.Value)))
            {
              if (c.GetType() == typeof(DataGridViewComboBoxCell))
                CommonFormFunctions.setComboBoxCell(c, defaultValue.Value);
              else
                c.Value = defaultValue.Value; // so add to the new row
            }
          }
        }
      }      
      if (grdEntities.Columns.Contains(colCONTACTTYPE))
      {
        if (newRow.Cells[colCONTACTTYPE].GetType() != typeof(DataGridViewComboBoxCell))
        {
          DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)_contactTypeCol.Clone();
          if (newRow.Cells[colCONTACTTYPE].Value != null)
            CommonFormFunctions.setComboBoxCell(cell, newRow.Cells[colCONTACTTYPE].Value);
          newRow.Cells[colCONTACTTYPE] = cell;
        }
      }


    }
    private void grdEntities_RowHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (grdEntities.SelectedRows != null && grdEntities.SelectedRows.Count > 0)
      {
        //if (grdEntities.SelectedRows[0].Index != 0 || _selectedRowIndex == -1)
        if (e.RowIndex == grdEntities.SelectedRows[0].Index)
        {
          _selectedRowIndex = e.RowIndex;  // only select the first row selected
          if (grdEntities.Columns.Contains(_uniqueIdentifer))
            _selectedID = CommonFunctions.CString(grdEntities.Rows[_selectedRowIndex].Cells[_uniqueIdentifer].Value);
          raiseRowChangedEvent(grdEntities.SelectedRows[0]);
        }
      }
      if (grdEntities.Rows.Count == 1) // selected thanged deoesnt fire if there is only one row so we make sure it does
        raiseRowChangedEvent(grdEntities.Rows[e.RowIndex]);
    }
    private void btnSwap_Click(object sender, EventArgs e)
    {
      swap();
    }
    private void ctlGroupView_OnSelected(object sender, EventArgs e)
    {
      selectPane();
    }
    #endregion

    #region custom events
    public delegate void RowSelectedHandler(object sender, ACG.CommonForms.MaintenanceGridRowSelectedArgs e);
    public event RowSelectedHandler RowSelected;
    protected void OnRowSelected(ACG.CommonForms.MaintenanceGridRowSelectedArgs e)
    {
      if (RowSelected != null)
      {
        RowSelected(this, e);
      }
    }
    private void raiseRowChangedEvent(DataGridViewRow row)
    {
      if (!_searching)
      {
        ACG.CommonForms.MaintenanceGridRowSelectedArgs e = new ACG.CommonForms.MaintenanceGridRowSelectedArgs();
        e.SelectedRow = row;
        loadEditPane(row);
        OnRowSelected(e);
      }
    }
    #endregion

  }
}
