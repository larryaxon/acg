using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using CCI.DesktopClient.Common;
using CCI.Common;

namespace CCI.DesktopClient.Screens
{
  public partial class frmCustomers : frmEntityMaintenance
  {
    private const string custTabName = "tabSaddlebackCustomer";
    private const string networkInventoryTabName = "tabNetworkInventory";
    private const string networkInventoryGridname = "srchNetworkInventory";
    public bool RefreshAll = false;
    public frmCustomers()
    {
      InitializeComponent();
      EntityType = "Customer";
      EntityOwner = "CCI";
      // don't disable these when the screen first comes up
      DisableExceptionFieldList.Add("btnRefreshFromCitycare");
      DisableExceptionFieldList.Add("btnMerge");
    }
    public new void Init(string entity)
    {
      base.Init(entity);
              // then add the CHS customer tab
      if (!tabMain.TabPages.ContainsKey(custTabName)) // only add this the first time through
      {
        tabMain.TabPages.Add(custTabName, "Saddleback Customer Info");
        TabPage cust = tabMain.TabPages[custTabName];
        Label labelAltID = new Label();
        labelAltID.Name = "lblAlternateID";
        labelAltID.Text = "Saddleback Customer ID";
        Label labelPaymentType = new Label();
        labelPaymentType.Name = "lblPaymentType";
        labelPaymentType.Text = "Payment Type";
        TextBox textAltID = new TextBox();
        textAltID.Name = "txtAlternateID";
        textAltID.Validating += new CancelEventHandler(textAltID_Validating);
        ComboBox comboPaymentType = new ComboBox();
        comboPaymentType.Name = "txtPaymentType";
        comboPaymentType.Items.AddRange(new string[] { "ACH", "Check", "CreditCard" });
        //comboPaymentType.Text = "ACH";
        cust.Controls.Add(labelAltID);
        cust.Controls.Add(textAltID);
        cust.Controls.Add(labelPaymentType);
        cust.Controls.Add(comboPaymentType);
        int margin = 10;
        int labelleft = 10;
        int top = 20;
        int labelwidth = 135;
        int textwidth = 135;
        int textleft = labelleft + labelwidth + margin;
        labelAltID.Left = labelleft;
        labelAltID.Top = top;
        labelAltID.Width = labelwidth;
        textAltID.Left = textleft;
        textAltID.Top = top;
        textAltID.Width = textwidth;
        labelPaymentType.Left = labelleft;
        labelPaymentType.Top = labelAltID.Top + labelAltID.Height + margin;
        labelPaymentType.Width = labelwidth;
        comboPaymentType.Top = labelPaymentType.Top;
        comboPaymentType.Left = textleft;
        comboPaymentType.Width = textwidth;
          
      }
      if (!tabMain.TabPages.ContainsKey(networkInventoryTabName))
      {
        tabMain.TabPages.Add(networkInventoryTabName, "Network Inventory");
        TabPage netinv = tabMain.TabPages[networkInventoryTabName];
        ctlSearchGrid srch = new ctlSearchGrid();
        srch.Name = networkInventoryGridname;
        netinv.Controls.Add(srch);
        srch.DisplaySearchCriteria = false;
        srch.HiddenColumns.Add("Customer", null);
        srch.Init(CommonData.UnmatchedNameTypes.CustomerNetworkInventory, networkInventoryGridname);
        srch.Dock = DockStyle.Fill;
      }
      reloadNetworkInventory();
        
    }
    private void textAltID_Validating(object sender, CancelEventArgs e)
    {
      string msg = "SaddlebackID must be in the form: 00000999 where 999 is the saddleback Customer Number";
      string altID = ((TextBox)sender).Text;
      if (!string.IsNullOrEmpty(altID)) // only perform this check if there is one
      {
        if (!CommonFunctions.IsNumeric(altID))
        {
          e.Cancel = true;
          ((TextBox)sender).Undo();
          MessageBox.Show(msg);
        }
        if (altID.Length < 8)
        {
          altID = CommonFunctions.CInt(altID).ToString("00000000");
        }
        // look for another customer that has the same alternate id
        string entity = null;
        if (!lblNewRecord.Visible) // not a new record
          entity = Entity;
        if (_dataSource.existsAlternateID(entity, altID, EntityType))
        {
          e.Cancel = true;
          ((TextBox)sender).Undo();
          MessageBox.Show("That Saddleback ID already exists for another customer");
        }
        //((TextBox)sender).Text = altID;
      }
    }
    private void btnRefreshFromCitycare_Click(object sender, EventArgs e)
    {
      DialogResult ans = MessageBox.Show("Are you sure you want to add all recently added customers in the City Care database to this database?", "Refresh Customers from CityCare", MessageBoxButtons.YesNo);
      if (ans == DialogResult.Yes)
      {
        Cursor.Current = Cursors.WaitCursor;
        _dataSource.updateDataFromCityCareCustomers(SecurityContext.User, RefreshAll);
        Cursor.Current = Cursors.Default;
      }
    }

    private void btnMerge_Click(object sender, EventArgs e)
    {
      ScreenBase dlg = new dlgMergeCustomer();
      ((dlgMergeCustomer)dlg).FromCustomer = Entity;
      dlg.ShowDialog(this);
    }
    public void reloadNetworkInventory()
    {
      if (tabMain.Controls.ContainsKey(networkInventoryTabName))
        if (tabMain.Controls[networkInventoryTabName].Controls.ContainsKey(networkInventoryGridname))
        {
          if (!string.IsNullOrEmpty(_entity))
          {
            ctlSearchGrid srch = (ctlSearchGrid)tabMain.Controls[networkInventoryTabName].Controls[networkInventoryGridname];
            Dictionary<string, string[]> criteria = new Dictionary<string, string[]>(StringComparer.CurrentCultureIgnoreCase);
            criteria.Add("Customer", new string[] { ctlSearchGrid.opEQUALS, _entity });
            srch.SearchCriteria = criteria;
            srch.ReLoad();
          }
        }
    }
  }
}
